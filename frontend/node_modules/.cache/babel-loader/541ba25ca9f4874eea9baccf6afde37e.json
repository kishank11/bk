{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_FAIL, USER_LOGIN_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_LOGIN_REQUEST, USER_LOGOUT, USER_PROFILE_REQUEST, USER_PROFILE_SUCCESS, USER_PROFILE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, FETCH_USERS_REQUEST, FETCH_USERS_FAIL, FETCH_USERS_SUCCESS } from '../actionTypes';\nexport const registerUser = (name, email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_REGISTER_REQUEST\n      });\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.post('/api/users', {\n        name,\n        email,\n        password\n      }, config);\n      console.log(name, email, password);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data\n      }); //Save the user into localstorage\n\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      console.log('mongdb error', error);\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const loginUser = (email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_LOGIN_REQUEST\n      });\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.post('/api/users/login', {\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      // Every error has a response.data where we can grab the error and display to the user\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload: error.response.data.message //The message is a key for our error message in our routes\n\n      });\n    }\n  };\n};\nexport const logoutUser = () => {\n  return async dispatch => {\n    localStorage.removeItem('userAuthData');\n\n    try {\n      dispatch({\n        type: USER_LOGOUT\n      });\n    } catch (error) {}\n  };\n}; //Since this is an authenticated request that need a token we have to get the token from store and pass it to our action\n//But lucky to us dispatch takes another argument which represent all our data in our store\n\nexport const getUserProfile = () => {\n  return async (dispatch, getState) => {\n    const {\n      userInfo\n    } = getState().userLogin;\n\n    try {\n      dispatch({\n        type: USER_PROFILE_REQUEST\n      });\n      const config = {\n        headers: {\n          authorization: `Bearer ${userInfo.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get('/api/users/profile', config);\n      dispatch({\n        type: USER_PROFILE_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_PROFILE_FAIL,\n        payload: error.response && error.response.data.message\n      });\n    }\n  };\n};\nexport const updateUser = (name, email, password) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_UPDATE_REQUEST,\n        loading: true\n      }); // Get the token of the user from store because that's what our endpoint need\n\n      const {\n        userInfo\n      } = getState().userLogin;\n      console.log(userInfo.token); //Create a config and pass to axios for authentication\n\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          authorization: `Bearer ${userInfo.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.put('/api/users/profile/update', {\n        name,\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_UPDATE_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_UPDATE_FAIL,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const fetchUsers = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: FETCH_USERS_REQUEST,\n        loading: true\n      });\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.get('/api/users', config);\n      dispatch({\n        type: FETCH_USERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_USERS_FAIL,\n        error: error.response && error.response.data.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Volumes/KK/book-keeping-app-main/frontend/src/redux/actions/users/userActions.js"],"names":["axios","USER_LOGIN_FAIL","USER_LOGIN_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_LOGIN_REQUEST","USER_LOGOUT","USER_PROFILE_REQUEST","USER_PROFILE_SUCCESS","USER_PROFILE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","FETCH_USERS_REQUEST","FETCH_USERS_FAIL","FETCH_USERS_SUCCESS","registerUser","name","email","password","dispatch","type","config","headers","data","post","console","log","payload","localStorage","setItem","JSON","stringify","error","response","message","loginUser","logoutUser","removeItem","getUserProfile","getState","userInfo","userLogin","authorization","token","get","updateUser","loading","put","fetchUsers"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport {\n  USER_LOGIN_FAIL,\n  USER_LOGIN_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_LOGIN_REQUEST,\n  USER_LOGOUT,\n  USER_PROFILE_REQUEST,\n  USER_PROFILE_SUCCESS,\n  USER_PROFILE_FAIL,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIL,\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_FAIL,\n  FETCH_USERS_SUCCESS,\n} from '../actionTypes';\n\nexport const registerUser = (name, email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_REGISTER_REQUEST,\n      });\n\n      const config = {\n        headers: { 'Content-Type': 'application/json' },\n      };\n\n      const { data } = await axios.post(\n        '/api/users',\n        {\n          name,\n          email,\n          password,\n        },\n        config\n      );\n      console.log(name, email, password);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data,\n      });\n\n      //Save the user into localstorage\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      console.log('mongdb error', error);\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n};\n\nexport const loginUser = (email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_LOGIN_REQUEST,\n      });\n\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const { data } = await axios.post(\n        '/api/users/login',\n        { email, password },\n        config\n      );\n\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data,\n      });\n\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      // Every error has a response.data where we can grab the error and display to the user\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload: error.response.data.message, //The message is a key for our error message in our routes\n      });\n    }\n  };\n};\n\nexport const logoutUser = () => {\n  return async dispatch => {\n    localStorage.removeItem('userAuthData');\n    try {\n      dispatch({\n        type: USER_LOGOUT,\n      });\n    } catch (error) {}\n  };\n};\n\n//Since this is an authenticated request that need a token we have to get the token from store and pass it to our action\n//But lucky to us dispatch takes another argument which represent all our data in our store\n\nexport const getUserProfile = () => {\n  return async (dispatch, getState) => {\n    const { userInfo } = getState().userLogin;\n    try {\n      dispatch({\n        type: USER_PROFILE_REQUEST,\n      });\n      const config = {\n        headers: {\n          authorization: `Bearer ${userInfo.token}`,\n        },\n      };\n      const { data } = await axios.get('/api/users/profile', config);\n      dispatch({\n        type: USER_PROFILE_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_PROFILE_FAIL,\n        payload: error.response && error.response.data.message,\n      });\n    }\n  };\n};\n\nexport const updateUser = (name, email, password) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_UPDATE_REQUEST,\n        loading: true,\n      });\n      // Get the token of the user from store because that's what our endpoint need\n      const { userInfo } = getState().userLogin;\n      console.log(userInfo.token);\n      //Create a config and pass to axios for authentication\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          authorization: `Bearer ${userInfo.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        '/api/users/profile/update',\n        { name, email, password },\n        config\n      );\n      dispatch({\n        type: USER_UPDATE_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_UPDATE_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n};\n\nexport const fetchUsers = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: FETCH_USERS_REQUEST,\n        loading: true,\n      });\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const { data } = await axios.get('/api/users', config);\n      dispatch({\n        type: FETCH_USERS_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_USERS_FAIL,\n        error: error.response && error.response.data.message,\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}