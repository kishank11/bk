{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport userReducer from '../reducers/userAuthReducer';\nimport userProfileReducer from '../reducers/userProfileReducer';\nimport userUpdateReducer from '../reducers/userUpdateReducer';\nimport createdBookReducer from '../reducers/books/createdBookReducer';\nimport booksListReducer from '../reducers/books/booksListReducer';\nimport bookDetailReducer from '../reducers/books/bookDetailsReducer';\nimport usersListReducer from '../reducers/usersListReducer';\nconst middleware = [thunk];\nconst reducer = combineReducers({\n  userLogin: userReducer,\n  userProfile: userProfileReducer,\n  updatedUser: userUpdateReducer,\n  bookCreated: createdBookReducer,\n  booksList: booksListReducer,\n  bookDetails: bookDetailReducer,\n  usersList: usersListReducer\n}); //store\n//Initial state\n//This is the initial state for all the reducers. NOTE the keys of the reducers above must be the same as the one you will pass as initialstate\n//The key must be the same and secondly look at the way the structure of the data in the store\n//Get the user in local storage\n\nconst userAuthFromStorage = localStorage.getItem('userAuthData') ? JSON.parse(localStorage.getItem('userAuthData')) : null;\nconst initialState = {\n  userLogin: {\n    userInfo: userAuthFromStorage\n  }\n};\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Volumes/KK/book-keeping-app-main/frontend/src/redux/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","userReducer","userProfileReducer","userUpdateReducer","createdBookReducer","booksListReducer","bookDetailReducer","usersListReducer","middleware","reducer","userLogin","userProfile","updatedUser","bookCreated","booksList","bookDetails","usersList","userAuthFromStorage","localStorage","getItem","JSON","parse","initialState","userInfo","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,kBAAP,MAA+B,sCAA/B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,iBAAP,MAA8B,sCAA9B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AAEA,MAAMC,UAAU,GAAG,CAACT,KAAD,CAAnB;AAEA,MAAMU,OAAO,GAAGZ,eAAe,CAAC;AAC9Ba,EAAAA,SAAS,EAAET,WADmB;AAE9BU,EAAAA,WAAW,EAAET,kBAFiB;AAG9BU,EAAAA,WAAW,EAAET,iBAHiB;AAI9BU,EAAAA,WAAW,EAAET,kBAJiB;AAK9BU,EAAAA,SAAS,EAAET,gBALmB;AAM9BU,EAAAA,WAAW,EAAET,iBANiB;AAO9BU,EAAAA,SAAS,EAAET;AAPmB,CAAD,CAA/B,C,CAUA;AACA;AAEA;AACA;AAEA;;AAEA,MAAMU,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CADwB,GAExB,IAFJ;AAIA,MAAMG,YAAY,GAAG;AACnBZ,EAAAA,SAAS,EAAE;AAAEa,IAAAA,QAAQ,EAAEN;AAAZ;AADQ,CAArB;AAIA,MAAMO,KAAK,GAAG5B,WAAW,CACvBa,OADuB,EAEvBa,YAFuB,EAGvBtB,mBAAmB,CAACF,eAAe,CAAC,GAAGU,UAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAegB,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport userReducer from '../reducers/userAuthReducer';\nimport userProfileReducer from '../reducers/userProfileReducer';\nimport userUpdateReducer from '../reducers/userUpdateReducer';\nimport createdBookReducer from '../reducers/books/createdBookReducer';\nimport booksListReducer from '../reducers/books/booksListReducer';\nimport bookDetailReducer from '../reducers/books/bookDetailsReducer';\nimport usersListReducer from '../reducers/usersListReducer';\n\nconst middleware = [thunk];\n\nconst reducer = combineReducers({\n  userLogin: userReducer,\n  userProfile: userProfileReducer,\n  updatedUser: userUpdateReducer,\n  bookCreated: createdBookReducer,\n  booksList: booksListReducer,\n  bookDetails: bookDetailReducer,\n  usersList: usersListReducer,\n});\n\n//store\n//Initial state\n\n//This is the initial state for all the reducers. NOTE the keys of the reducers above must be the same as the one you will pass as initialstate\n//The key must be the same and secondly look at the way the structure of the data in the store\n\n//Get the user in local storage\n\nconst userAuthFromStorage = localStorage.getItem('userAuthData')\n  ? JSON.parse(localStorage.getItem('userAuthData'))\n  : null;\n\nconst initialState = {\n  userLogin: { userInfo: userAuthFromStorage },\n};\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}